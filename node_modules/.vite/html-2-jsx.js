import {
  __commonJS
} from "./chunk-HV27UI33.js";

// node_modules/html-2-jsx/node_modules/react-dom/lib/reactProdInvariant.js
var require_reactProdInvariant = __commonJS({
  "node_modules/html-2-jsx/node_modules/react-dom/lib/reactProdInvariant.js"(exports, module) {
    "use strict";
    function reactProdInvariant(code) {
      var argCount = arguments.length - 1;
      var message = "Minified React error #" + code + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=" + code;
      for (var argIdx = 0; argIdx < argCount; argIdx++) {
        message += "&args[]=" + encodeURIComponent(arguments[argIdx + 1]);
      }
      message += " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      var error = new Error(message);
      error.name = "Invariant Violation";
      error.framesToPop = 1;
      throw error;
    }
    module.exports = reactProdInvariant;
  }
});

// node_modules/fbjs/lib/invariant.js
var require_invariant = __commonJS({
  "node_modules/fbjs/lib/invariant.js"(exports, module) {
    "use strict";
    var validateFormat = function validateFormat2(format) {
    };
    if (true) {
      validateFormat = function validateFormat2(format) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      };
    }
    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function() {
            return args[argIndex++];
          }));
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    }
    module.exports = invariant;
  }
});

// node_modules/html-2-jsx/node_modules/react-dom/lib/DOMProperty.js
var require_DOMProperty = __commonJS({
  "node_modules/html-2-jsx/node_modules/react-dom/lib/DOMProperty.js"(exports, module) {
    "use strict";
    var _prodInvariant = require_reactProdInvariant();
    var invariant = require_invariant();
    function checkMask(value, bitmask) {
      return (value & bitmask) === bitmask;
    }
    var DOMPropertyInjection = {
      MUST_USE_PROPERTY: 1,
      HAS_BOOLEAN_VALUE: 4,
      HAS_NUMERIC_VALUE: 8,
      HAS_POSITIVE_NUMERIC_VALUE: 16 | 8,
      HAS_OVERLOADED_BOOLEAN_VALUE: 32,
      injectDOMPropertyConfig: function(domPropertyConfig) {
        var Injection = DOMPropertyInjection;
        var Properties = domPropertyConfig.Properties || {};
        var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
        var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
        var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
        var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
        if (domPropertyConfig.isCustomAttribute) {
          DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
        }
        for (var propName in Properties) {
          !!DOMProperty.properties.hasOwnProperty(propName) ? true ? invariant(false, "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", propName) : _prodInvariant("48", propName) : void 0;
          var lowerCased = propName.toLowerCase();
          var propConfig = Properties[propName];
          var propertyInfo = {
            attributeName: lowerCased,
            attributeNamespace: null,
            propertyName: propName,
            mutationMethod: null,
            mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
            hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
            hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
            hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
            hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
          };
          !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? true ? invariant(false, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s", propName) : _prodInvariant("50", propName) : void 0;
          if (true) {
            DOMProperty.getPossibleStandardName[lowerCased] = propName;
          }
          if (DOMAttributeNames.hasOwnProperty(propName)) {
            var attributeName = DOMAttributeNames[propName];
            propertyInfo.attributeName = attributeName;
            if (true) {
              DOMProperty.getPossibleStandardName[attributeName] = propName;
            }
          }
          if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
            propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
          }
          if (DOMPropertyNames.hasOwnProperty(propName)) {
            propertyInfo.propertyName = DOMPropertyNames[propName];
          }
          if (DOMMutationMethods.hasOwnProperty(propName)) {
            propertyInfo.mutationMethod = DOMMutationMethods[propName];
          }
          DOMProperty.properties[propName] = propertyInfo;
        }
      }
    };
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var DOMProperty = {
      ID_ATTRIBUTE_NAME: "data-reactid",
      ROOT_ATTRIBUTE_NAME: "data-reactroot",
      ATTRIBUTE_NAME_START_CHAR,
      ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",
      properties: {},
      getPossibleStandardName: true ? { autofocus: "autoFocus" } : null,
      _isCustomAttributeFunctions: [],
      isCustomAttribute: function(attributeName) {
        for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
          var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
          if (isCustomAttributeFn(attributeName)) {
            return true;
          }
        }
        return false;
      },
      injection: DOMPropertyInjection
    };
    module.exports = DOMProperty;
  }
});

// node_modules/html-2-jsx/node_modules/react-dom/lib/HTMLDOMPropertyConfig.js
var require_HTMLDOMPropertyConfig = __commonJS({
  "node_modules/html-2-jsx/node_modules/react-dom/lib/HTMLDOMPropertyConfig.js"(exports, module) {
    "use strict";
    var DOMProperty = require_DOMProperty();
    var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
    var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
    var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
    var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
    var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
    var HTMLDOMPropertyConfig = {
      isCustomAttribute: RegExp.prototype.test.bind(new RegExp("^(data|aria)-[" + DOMProperty.ATTRIBUTE_NAME_CHAR + "]*$")),
      Properties: {
        accept: 0,
        acceptCharset: 0,
        accessKey: 0,
        action: 0,
        allowFullScreen: HAS_BOOLEAN_VALUE,
        allowTransparency: 0,
        alt: 0,
        as: 0,
        async: HAS_BOOLEAN_VALUE,
        autoComplete: 0,
        autoPlay: HAS_BOOLEAN_VALUE,
        capture: HAS_BOOLEAN_VALUE,
        cellPadding: 0,
        cellSpacing: 0,
        charSet: 0,
        challenge: 0,
        checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        cite: 0,
        classID: 0,
        className: 0,
        cols: HAS_POSITIVE_NUMERIC_VALUE,
        colSpan: 0,
        content: 0,
        contentEditable: 0,
        contextMenu: 0,
        controls: HAS_BOOLEAN_VALUE,
        controlsList: 0,
        coords: 0,
        crossOrigin: 0,
        data: 0,
        dateTime: 0,
        "default": HAS_BOOLEAN_VALUE,
        defer: HAS_BOOLEAN_VALUE,
        dir: 0,
        disabled: HAS_BOOLEAN_VALUE,
        download: HAS_OVERLOADED_BOOLEAN_VALUE,
        draggable: 0,
        encType: 0,
        form: 0,
        formAction: 0,
        formEncType: 0,
        formMethod: 0,
        formNoValidate: HAS_BOOLEAN_VALUE,
        formTarget: 0,
        frameBorder: 0,
        headers: 0,
        height: 0,
        hidden: HAS_BOOLEAN_VALUE,
        high: 0,
        href: 0,
        hrefLang: 0,
        htmlFor: 0,
        httpEquiv: 0,
        icon: 0,
        id: 0,
        inputMode: 0,
        integrity: 0,
        is: 0,
        keyParams: 0,
        keyType: 0,
        kind: 0,
        label: 0,
        lang: 0,
        list: 0,
        loop: HAS_BOOLEAN_VALUE,
        low: 0,
        manifest: 0,
        marginHeight: 0,
        marginWidth: 0,
        max: 0,
        maxLength: 0,
        media: 0,
        mediaGroup: 0,
        method: 0,
        min: 0,
        minLength: 0,
        multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        name: 0,
        nonce: 0,
        noValidate: HAS_BOOLEAN_VALUE,
        open: HAS_BOOLEAN_VALUE,
        optimum: 0,
        pattern: 0,
        placeholder: 0,
        playsInline: HAS_BOOLEAN_VALUE,
        poster: 0,
        preload: 0,
        profile: 0,
        radioGroup: 0,
        readOnly: HAS_BOOLEAN_VALUE,
        referrerPolicy: 0,
        rel: 0,
        required: HAS_BOOLEAN_VALUE,
        reversed: HAS_BOOLEAN_VALUE,
        role: 0,
        rows: HAS_POSITIVE_NUMERIC_VALUE,
        rowSpan: HAS_NUMERIC_VALUE,
        sandbox: 0,
        scope: 0,
        scoped: HAS_BOOLEAN_VALUE,
        scrolling: 0,
        seamless: HAS_BOOLEAN_VALUE,
        selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
        shape: 0,
        size: HAS_POSITIVE_NUMERIC_VALUE,
        sizes: 0,
        span: HAS_POSITIVE_NUMERIC_VALUE,
        spellCheck: 0,
        src: 0,
        srcDoc: 0,
        srcLang: 0,
        srcSet: 0,
        start: HAS_NUMERIC_VALUE,
        step: 0,
        style: 0,
        summary: 0,
        tabIndex: 0,
        target: 0,
        title: 0,
        type: 0,
        useMap: 0,
        value: 0,
        width: 0,
        wmode: 0,
        wrap: 0,
        about: 0,
        datatype: 0,
        inlist: 0,
        prefix: 0,
        property: 0,
        resource: 0,
        "typeof": 0,
        vocab: 0,
        autoCapitalize: 0,
        autoCorrect: 0,
        autoSave: 0,
        color: 0,
        itemProp: 0,
        itemScope: HAS_BOOLEAN_VALUE,
        itemType: 0,
        itemID: 0,
        itemRef: 0,
        results: 0,
        security: 0,
        unselectable: 0
      },
      DOMAttributeNames: {
        acceptCharset: "accept-charset",
        className: "class",
        htmlFor: "for",
        httpEquiv: "http-equiv"
      },
      DOMPropertyNames: {},
      DOMMutationMethods: {
        value: function(node, value) {
          if (value == null) {
            return node.removeAttribute("value");
          }
          if (node.type !== "number" || node.hasAttribute("value") === false) {
            node.setAttribute("value", "" + value);
          } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
            node.setAttribute("value", "" + value);
          }
        }
      }
    };
    module.exports = HTMLDOMPropertyConfig;
  }
});

// node_modules/html-2-jsx/node_modules/react-dom/lib/SVGDOMPropertyConfig.js
var require_SVGDOMPropertyConfig = __commonJS({
  "node_modules/html-2-jsx/node_modules/react-dom/lib/SVGDOMPropertyConfig.js"(exports, module) {
    "use strict";
    var NS = {
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace"
    };
    var ATTRS = {
      accentHeight: "accent-height",
      accumulate: 0,
      additive: 0,
      alignmentBaseline: "alignment-baseline",
      allowReorder: "allowReorder",
      alphabetic: 0,
      amplitude: 0,
      arabicForm: "arabic-form",
      ascent: 0,
      attributeName: "attributeName",
      attributeType: "attributeType",
      autoReverse: "autoReverse",
      azimuth: 0,
      baseFrequency: "baseFrequency",
      baseProfile: "baseProfile",
      baselineShift: "baseline-shift",
      bbox: 0,
      begin: 0,
      bias: 0,
      by: 0,
      calcMode: "calcMode",
      capHeight: "cap-height",
      clip: 0,
      clipPath: "clip-path",
      clipRule: "clip-rule",
      clipPathUnits: "clipPathUnits",
      colorInterpolation: "color-interpolation",
      colorInterpolationFilters: "color-interpolation-filters",
      colorProfile: "color-profile",
      colorRendering: "color-rendering",
      contentScriptType: "contentScriptType",
      contentStyleType: "contentStyleType",
      cursor: 0,
      cx: 0,
      cy: 0,
      d: 0,
      decelerate: 0,
      descent: 0,
      diffuseConstant: "diffuseConstant",
      direction: 0,
      display: 0,
      divisor: 0,
      dominantBaseline: "dominant-baseline",
      dur: 0,
      dx: 0,
      dy: 0,
      edgeMode: "edgeMode",
      elevation: 0,
      enableBackground: "enable-background",
      end: 0,
      exponent: 0,
      externalResourcesRequired: "externalResourcesRequired",
      fill: 0,
      fillOpacity: "fill-opacity",
      fillRule: "fill-rule",
      filter: 0,
      filterRes: "filterRes",
      filterUnits: "filterUnits",
      floodColor: "flood-color",
      floodOpacity: "flood-opacity",
      focusable: 0,
      fontFamily: "font-family",
      fontSize: "font-size",
      fontSizeAdjust: "font-size-adjust",
      fontStretch: "font-stretch",
      fontStyle: "font-style",
      fontVariant: "font-variant",
      fontWeight: "font-weight",
      format: 0,
      from: 0,
      fx: 0,
      fy: 0,
      g1: 0,
      g2: 0,
      glyphName: "glyph-name",
      glyphOrientationHorizontal: "glyph-orientation-horizontal",
      glyphOrientationVertical: "glyph-orientation-vertical",
      glyphRef: "glyphRef",
      gradientTransform: "gradientTransform",
      gradientUnits: "gradientUnits",
      hanging: 0,
      horizAdvX: "horiz-adv-x",
      horizOriginX: "horiz-origin-x",
      ideographic: 0,
      imageRendering: "image-rendering",
      "in": 0,
      in2: 0,
      intercept: 0,
      k: 0,
      k1: 0,
      k2: 0,
      k3: 0,
      k4: 0,
      kernelMatrix: "kernelMatrix",
      kernelUnitLength: "kernelUnitLength",
      kerning: 0,
      keyPoints: "keyPoints",
      keySplines: "keySplines",
      keyTimes: "keyTimes",
      lengthAdjust: "lengthAdjust",
      letterSpacing: "letter-spacing",
      lightingColor: "lighting-color",
      limitingConeAngle: "limitingConeAngle",
      local: 0,
      markerEnd: "marker-end",
      markerMid: "marker-mid",
      markerStart: "marker-start",
      markerHeight: "markerHeight",
      markerUnits: "markerUnits",
      markerWidth: "markerWidth",
      mask: 0,
      maskContentUnits: "maskContentUnits",
      maskUnits: "maskUnits",
      mathematical: 0,
      mode: 0,
      numOctaves: "numOctaves",
      offset: 0,
      opacity: 0,
      operator: 0,
      order: 0,
      orient: 0,
      orientation: 0,
      origin: 0,
      overflow: 0,
      overlinePosition: "overline-position",
      overlineThickness: "overline-thickness",
      paintOrder: "paint-order",
      panose1: "panose-1",
      pathLength: "pathLength",
      patternContentUnits: "patternContentUnits",
      patternTransform: "patternTransform",
      patternUnits: "patternUnits",
      pointerEvents: "pointer-events",
      points: 0,
      pointsAtX: "pointsAtX",
      pointsAtY: "pointsAtY",
      pointsAtZ: "pointsAtZ",
      preserveAlpha: "preserveAlpha",
      preserveAspectRatio: "preserveAspectRatio",
      primitiveUnits: "primitiveUnits",
      r: 0,
      radius: 0,
      refX: "refX",
      refY: "refY",
      renderingIntent: "rendering-intent",
      repeatCount: "repeatCount",
      repeatDur: "repeatDur",
      requiredExtensions: "requiredExtensions",
      requiredFeatures: "requiredFeatures",
      restart: 0,
      result: 0,
      rotate: 0,
      rx: 0,
      ry: 0,
      scale: 0,
      seed: 0,
      shapeRendering: "shape-rendering",
      slope: 0,
      spacing: 0,
      specularConstant: "specularConstant",
      specularExponent: "specularExponent",
      speed: 0,
      spreadMethod: "spreadMethod",
      startOffset: "startOffset",
      stdDeviation: "stdDeviation",
      stemh: 0,
      stemv: 0,
      stitchTiles: "stitchTiles",
      stopColor: "stop-color",
      stopOpacity: "stop-opacity",
      strikethroughPosition: "strikethrough-position",
      strikethroughThickness: "strikethrough-thickness",
      string: 0,
      stroke: 0,
      strokeDasharray: "stroke-dasharray",
      strokeDashoffset: "stroke-dashoffset",
      strokeLinecap: "stroke-linecap",
      strokeLinejoin: "stroke-linejoin",
      strokeMiterlimit: "stroke-miterlimit",
      strokeOpacity: "stroke-opacity",
      strokeWidth: "stroke-width",
      surfaceScale: "surfaceScale",
      systemLanguage: "systemLanguage",
      tableValues: "tableValues",
      targetX: "targetX",
      targetY: "targetY",
      textAnchor: "text-anchor",
      textDecoration: "text-decoration",
      textRendering: "text-rendering",
      textLength: "textLength",
      to: 0,
      transform: 0,
      u1: 0,
      u2: 0,
      underlinePosition: "underline-position",
      underlineThickness: "underline-thickness",
      unicode: 0,
      unicodeBidi: "unicode-bidi",
      unicodeRange: "unicode-range",
      unitsPerEm: "units-per-em",
      vAlphabetic: "v-alphabetic",
      vHanging: "v-hanging",
      vIdeographic: "v-ideographic",
      vMathematical: "v-mathematical",
      values: 0,
      vectorEffect: "vector-effect",
      version: 0,
      vertAdvY: "vert-adv-y",
      vertOriginX: "vert-origin-x",
      vertOriginY: "vert-origin-y",
      viewBox: "viewBox",
      viewTarget: "viewTarget",
      visibility: 0,
      widths: 0,
      wordSpacing: "word-spacing",
      writingMode: "writing-mode",
      x: 0,
      xHeight: "x-height",
      x1: 0,
      x2: 0,
      xChannelSelector: "xChannelSelector",
      xlinkActuate: "xlink:actuate",
      xlinkArcrole: "xlink:arcrole",
      xlinkHref: "xlink:href",
      xlinkRole: "xlink:role",
      xlinkShow: "xlink:show",
      xlinkTitle: "xlink:title",
      xlinkType: "xlink:type",
      xmlBase: "xml:base",
      xmlns: 0,
      xmlnsXlink: "xmlns:xlink",
      xmlLang: "xml:lang",
      xmlSpace: "xml:space",
      y: 0,
      y1: 0,
      y2: 0,
      yChannelSelector: "yChannelSelector",
      z: 0,
      zoomAndPan: "zoomAndPan"
    };
    var SVGDOMPropertyConfig = {
      Properties: {},
      DOMAttributeNamespaces: {
        xlinkActuate: NS.xlink,
        xlinkArcrole: NS.xlink,
        xlinkHref: NS.xlink,
        xlinkRole: NS.xlink,
        xlinkShow: NS.xlink,
        xlinkTitle: NS.xlink,
        xlinkType: NS.xlink,
        xmlBase: NS.xml,
        xmlLang: NS.xml,
        xmlSpace: NS.xml
      },
      DOMAttributeNames: {}
    };
    Object.keys(ATTRS).forEach(function(key) {
      SVGDOMPropertyConfig.Properties[key] = 0;
      if (ATTRS[key]) {
        SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
      }
    });
    module.exports = SVGDOMPropertyConfig;
  }
});

// node_modules/html-2-jsx/src/htmltojsx.js
var require_htmltojsx = __commonJS({
  "node_modules/html-2-jsx/src/htmltojsx.js"(exports, module) {
    "use strict";
    var NODE_TYPE = {
      ELEMENT: 1,
      TEXT: 3,
      COMMENT: 8
    };
    var ATTRIBUTE_MAPPING = {
      "for": "htmlFor",
      "class": "className"
    };
    var ELEMENT_ATTRIBUTE_MAPPING = {
      "input": {
        "checked": "defaultChecked",
        "value": "defaultValue"
      }
    };
    var SVG_ATTRIBUTE_MAPPING = {};
    var SVG_TAG_MAPPING = [
      "circle",
      "defs",
      "ellipse",
      "g",
      "line",
      "linearGradient",
      "mask",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialGradient",
      "rect",
      "stop",
      "svg",
      "text",
      "tspan"
    ];
    var CONTAINER_MAPPING = {
      "thead": "table",
      "tbody": "table",
      "tfoot": "table",
      "caption": "table",
      "colgroup": "table",
      "col": "colgroup",
      "tr": "tbody",
      "th": "tr",
      "td": "tr",
      "dt": "dl",
      "dd": "dl"
    };
    var HTMLDOMPropertyConfig = require_HTMLDOMPropertyConfig();
    var SVGDOMPropertyConfig = require_SVGDOMPropertyConfig();
    for (propname in HTMLDOMPropertyConfig.Properties) {
      if (!HTMLDOMPropertyConfig.Properties.hasOwnProperty(propname)) {
        continue;
      }
      mapFrom = HTMLDOMPropertyConfig.DOMAttributeNames[propname] || propname.toLowerCase();
      if (!ATTRIBUTE_MAPPING[mapFrom])
        ATTRIBUTE_MAPPING[mapFrom] = propname;
    }
    var mapFrom;
    var propname;
    for (propname in SVGDOMPropertyConfig.Properties) {
      if (!SVGDOMPropertyConfig.Properties.hasOwnProperty(propname)) {
        continue;
      }
      mapFrom = SVGDOMPropertyConfig.DOMAttributeNames[propname] || propname.toLowerCase();
      if (!ATTRIBUTE_MAPPING[mapFrom])
        SVG_ATTRIBUTE_MAPPING[mapFrom] = propname;
    }
    var mapFrom;
    var propname;
    function repeatString(string, times) {
      if (times === 1) {
        return string;
      }
      if (times < 0) {
        throw new Error();
      }
      var repeated = "";
      while (times) {
        if (times & 1) {
          repeated += string;
        }
        if (times >>= 1) {
          string += string;
        }
      }
      return repeated;
    }
    function endsWith(haystack, needle) {
      return haystack.slice(-needle.length) === needle;
    }
    function trimEnd(haystack, needle) {
      return endsWith(haystack, needle) ? haystack.slice(0, -needle.length) : haystack;
    }
    function hyphenToCamelCase(string) {
      return string.replace(/-(.)/g, function(match, chr) {
        return chr.toUpperCase();
      });
    }
    function isEmpty(string) {
      return !/[^\s]/.test(string);
    }
    function isConvertiblePixelValue(value) {
      return /^\d+px$/.test(value);
    }
    function isNumeric(input) {
      return input !== void 0 && input !== null && (typeof input === "number" || parseInt(input, 10) == input);
    }
    var StyleParser = function(rawStyle) {
      this.parse(rawStyle);
    };
    StyleParser.prototype = {
      parse: function(rawStyle) {
        this.styles = {};
        rawStyle.split(";").forEach(function(style) {
          style = style.trim();
          var firstColon = style.indexOf(":");
          var key = style.substr(0, firstColon);
          var value = style.substr(firstColon + 1).trim();
          if (key !== "") {
            key = key.toLowerCase();
            this.styles[key] = value;
          }
        }, this);
      },
      toJSXString: function() {
        var output = [];
        for (var key in this.styles) {
          if (!this.styles.hasOwnProperty(key)) {
            continue;
          }
          output.push(this.toJSXKey(key) + ": " + this.toJSXValue(this.styles[key]));
        }
        return output.join(", ");
      },
      toJSXKey: function(key) {
        if (/^-ms-/.test(key)) {
          key = key.substr(1);
        }
        return hyphenToCamelCase(key);
      },
      toJSXValue: function(value) {
        if (isNumeric(value)) {
          return value;
        } else if (isConvertiblePixelValue(value)) {
          return trimEnd(value, "px");
        } else {
          return "'" + value.replace(/'/g, '"') + "'";
        }
      }
    };
    module.exports = (createElement) => {
      const tempEl = createElement("div");
      function escapeSpecialChars(value) {
        tempEl.textContent = value;
        return tempEl.innerHTML;
      }
      const HTMLtoJSX = function(config) {
        this.config = config || {};
        if (this.config.createClass === void 0) {
          this.config.createClass = true;
        }
        if (this.config.outputClassName && this.config.outputClassName + "") {
          this.config.outputClassName = this.config.outputClassName.replace(/^\w/, function(s) {
            return s.toUpperCase();
          });
        }
        if (!this.config.indent) {
          this.config.indent = "  ";
        }
      };
      HTMLtoJSX.prototype = {
        reset: function() {
          this.output = "";
          this.level = 0;
          this._inPreTag = false;
        },
        convert: function(html) {
          this.reset();
          var containerEl = createElement(this._chooseContainer(html));
          containerEl.innerHTML = "\n" + this._cleanInput(html) + "\n";
          if (this.config.createClass) {
            if (this.config.outputClassName) {
              this.output = "var " + this.config.outputClassName + " = React.createClass({\n";
            } else {
              this.output = "React.createClass({\n";
            }
            this.output += this.config.indent + "render: function() {\n";
            this.output += this.config.indent + this.config.indent + "return (\n";
          }
          if (this._onlyOneTopLevel(containerEl)) {
            this._traverse(containerEl);
          } else {
            this.output += this.config.indent + this.config.indent + this.config.indent;
            this.level++;
            this._visit(containerEl);
          }
          this.output = this.output.trim() + "\n";
          if (this.config.createClass) {
            this.output += this.config.indent + this.config.indent + ");\n";
            this.output += this.config.indent + "}\n";
            this.output += "});";
          }
          return this.output;
        },
        _chooseContainer: function(html) {
          var regex = /<([^\s>]+)/;
          regex = (html || "").match(regex);
          return regex && CONTAINER_MAPPING[regex[1]] ? CONTAINER_MAPPING[regex[1]] : "div";
        },
        _cleanInput: function(html) {
          html = html.trim();
          html = html.replace(/<script([\s\S]*?)<\/script>/g, "");
          return html;
        },
        _onlyOneTopLevel: function(containerEl) {
          if (containerEl.childNodes.length === 1 && containerEl.childNodes[0].nodeType === NODE_TYPE.ELEMENT) {
            return true;
          }
          var foundElement = false;
          for (var i = 0, count = containerEl.childNodes.length; i < count; i++) {
            var child = containerEl.childNodes[i];
            if (child.nodeType === NODE_TYPE.COMMENT || child.nodeType === NODE_TYPE.ELEMENT) {
              if (foundElement) {
                return false;
              } else {
                foundElement = true;
              }
            } else if (child.nodeType === NODE_TYPE.TEXT && !isEmpty(child.textContent)) {
              return false;
            }
          }
          return true;
        },
        _getIndentedNewline: function() {
          return "\n" + repeatString(this.config.indent, this.level + (this.config.createClass ? 2 : -1));
        },
        _visit: function(node) {
          this._beginVisit(node);
          this._traverse(node);
          this._endVisit(node);
        },
        _traverse: function(node) {
          this.level++;
          for (var i = 0, count = node.childNodes.length; i < count; i++) {
            this._visit(node.childNodes[i]);
          }
          this.level--;
        },
        _beginVisit: function(node) {
          switch (node.nodeType) {
            case NODE_TYPE.ELEMENT:
              this._beginVisitElement(node);
              break;
            case NODE_TYPE.TEXT:
              this._visitText(node);
              break;
            case NODE_TYPE.COMMENT:
              this._visitComment(node);
              break;
            default:
              console.warn("Unrecognised node type: " + node.nodeType);
          }
        },
        _endVisit: function(node) {
          switch (node.nodeType) {
            case NODE_TYPE.ELEMENT:
              this._endVisitElement(node);
              break;
            case NODE_TYPE.TEXT:
            case NODE_TYPE.COMMENT:
              break;
          }
        },
        _beginVisitElement: function(node) {
          var tagName = node.tagName.toLowerCase();
          var attributes = [];
          for (var i = 0, count = node.attributes.length; i < count; i++) {
            attributes.push(this._getElementAttribute(node, node.attributes[i]));
          }
          if (tagName === "textarea") {
            attributes.push("defaultValue={" + JSON.stringify(node.value) + "}");
          }
          if (tagName === "style") {
            attributes.push("dangerouslySetInnerHTML={{__html: " + JSON.stringify(node.textContent) + " }}");
          }
          if (tagName === "pre") {
            this._inPreTag = true;
          }
          this.output += "<" + tagName;
          if (attributes.length > 0) {
            this.output += " " + attributes.join(" ");
          }
          if (!this._isSelfClosing(node)) {
            this.output += ">";
          }
        },
        _endVisitElement: function(node) {
          var tagName = node.tagName.toLowerCase();
          this.output = trimEnd(this.output, this.config.indent);
          if (this._isSelfClosing(node)) {
            this.output += " />";
          } else {
            this.output += "</" + node.tagName.toLowerCase() + ">";
          }
          if (tagName === "pre") {
            this._inPreTag = false;
          }
        },
        _isSelfClosing: function(node) {
          return !node.firstChild || node.tagName.toLowerCase() === "textarea" || node.tagName.toLowerCase() === "style";
        },
        _visitText: function(node) {
          var parentTag = node.parentNode && node.parentNode.tagName.toLowerCase();
          if (parentTag === "textarea" || parentTag === "style") {
            return;
          }
          var text = escapeSpecialChars(node.textContent);
          if (this._inPreTag) {
            text = text.replace(/\r/g, "").replace(/( {2,}|\n|\t|\{|\})/g, function(whitespace) {
              return "{" + JSON.stringify(whitespace) + "}";
            });
          } else {
            text = text.replace(/(\{|\})/g, function(brace) {
              return "{'" + brace + "'}";
            });
            if (text.indexOf("\n") > -1) {
              text = text.replace(/\n\s*/g, this._getIndentedNewline());
            }
          }
          this.output += text;
        },
        _visitComment: function(node) {
          if (this.config.hideComment) {
            this.output = this.output.replace(/\s+$/, "");
          } else {
            this.output += "{/*" + node.textContent.replace("*/", "* /") + "*/}";
          }
        },
        _getElementAttribute: function(node, attribute) {
          switch (attribute.name) {
            case "style":
              return this._getStyleAttribute(attribute.value);
            default:
              var tagName = node.tagName.toLowerCase();
              var name = ELEMENT_ATTRIBUTE_MAPPING[tagName] && ELEMENT_ATTRIBUTE_MAPPING[tagName][attribute.name] || ATTRIBUTE_MAPPING[attribute.name] || -1 < SVG_TAG_MAPPING.indexOf(tagName) && SVG_ATTRIBUTE_MAPPING[attribute.name] || attribute.name;
              var result = name;
              if (-1 < name.indexOf(":")) {
                result = "";
              } else if (isNumeric(attribute.value)) {
                result += "={" + attribute.value + "}";
              } else if (attribute.value.length > 0) {
                result += '="' + attribute.value.replace(/"/gm, "&quot;") + '"';
              }
              return result;
          }
        },
        _getStyleAttribute: function(styles) {
          var jsxStyles = new StyleParser(styles).toJSXString();
          return "style={{" + jsxStyles + "}}";
        }
      };
      return HTMLtoJSX;
    };
  }
});

// node_modules/html-2-jsx/src/browser.js
var require_browser = __commonJS({
  "node_modules/html-2-jsx/src/browser.js"(exports, module) {
    var createElement = function(tag) {
      return document.createElement(tag);
    };
    module.exports = require_htmltojsx()(createElement);
  }
});

// dep:html-2-jsx
var html_2_jsx_default = require_browser();
export {
  html_2_jsx_default as default
};
/** @preserve
 *  Copyright (c) 2014, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */
//# sourceMappingURL=html-2-jsx.js.map
