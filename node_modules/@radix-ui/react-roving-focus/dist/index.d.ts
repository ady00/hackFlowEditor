import * as React from "react";
import { Primitive } from "@radix-ui/react-primitive";
import * as Polymorphic from "@radix-ui/react-polymorphic";
declare const GROUP_DEFAULT_TAG = "span";
type Orientation = React.AriaAttributes['aria-orientation'];
type Direction = 'ltr' | 'rtl';
type RovingFocusGroupOptions = {
    /**
     * The orientation of the group.
     * Mainly so arrow navigation is done accordingly (left & right vs. up & down)
     */
    orientation?: Orientation;
    /**
     * The direction of navigation between items.
     * @defaultValue ltr
     */
    dir?: Direction;
    /**
     * Whether keyboard navigation should loop around
     * @defaultValue false
     */
    loop?: boolean;
};
type RovingFocusGroupOwnProps = Polymorphic.OwnProps<typeof RovingFocusGroupImpl>;
export type RovingFocusGroupPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof RovingFocusGroupImpl>, RovingFocusGroupOwnProps>;
export const RovingFocusGroup: RovingFocusGroupPrimitive;
type RovingFocusGroupImplOwnProps = Polymorphic.Merge<Polymorphic.OwnProps<typeof Primitive>, RovingFocusGroupOptions & {
    currentTabStopId?: string | null;
    defaultCurrentTabStopId?: string;
    onCurrentTabStopIdChange?: (tabStopId: string | null) => void;
    onEntryFocus?: (event: Event) => void;
}>;
type RovingFocusGroupImplPrimitive = Polymorphic.ForwardRefComponent<typeof GROUP_DEFAULT_TAG, RovingFocusGroupImplOwnProps>;
declare const RovingFocusGroupImpl: RovingFocusGroupImplPrimitive;
declare const ITEM_DEFAULT_TAG = "span";
type RovingFocusItemOwnProps = Polymorphic.Merge<Polymorphic.OwnProps<typeof Primitive>, {
    focusable?: boolean;
    active?: boolean;
}>;
export type RovingFocusItemPrimitive = Polymorphic.ForwardRefComponent<typeof ITEM_DEFAULT_TAG, RovingFocusItemOwnProps>;
export const RovingFocusItem: RovingFocusItemPrimitive;
export const Root: RovingFocusGroupPrimitive;
export const Item: RovingFocusItemPrimitive;

//# sourceMappingURL=index.d.ts.map
