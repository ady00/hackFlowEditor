{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/roving-focus/src/RovingFocusGroup.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\nconst ENTRY_FOCUS = 'rovingFocusGroup.onEntryFocus';\nconst EVENT_OPTIONS = { bubbles: false, cancelable: true };\n\ntype ItemData = { id: string; focusable: boolean; active: boolean };\nconst [CollectionProvider, CollectionSlot, CollectionItemSlot, useCollection] = createCollection<\n  HTMLSpanElement,\n  ItemData\n>();\n\n/* -------------------------------------------------------------------------------------------------\n * RovingFocusGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'RovingFocusGroup';\nconst GROUP_DEFAULT_TAG = 'span';\n\ntype Orientation = React.AriaAttributes['aria-orientation'];\ntype Direction = 'ltr' | 'rtl';\n\ntype RovingFocusGroupOptions = {\n  /**\n   * The orientation of the group.\n   * Mainly so arrow navigation is done accordingly (left & right vs. up & down)\n   */\n  orientation?: Orientation;\n  /**\n   * The direction of navigation between items.\n   * @defaultValue ltr\n   */\n  dir?: Direction;\n  /**\n   * Whether keyboard navigation should loop around\n   * @defaultValue false\n   */\n  loop?: boolean;\n};\n\ntype RovingContextValue = RovingFocusGroupOptions & {\n  currentTabStopId: string | null;\n  onItemFocus(tabStopId: string): void;\n  onItemShiftTab(): void;\n};\n\nconst [RovingFocusProvider, useRovingFocusContext] = createContext<RovingContextValue>(GROUP_NAME);\n\ntype RovingFocusGroupOwnProps = Polymorphic.OwnProps<typeof RovingFocusGroupImpl>;\n\ntype RovingFocusGroupPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof RovingFocusGroupImpl>,\n  RovingFocusGroupOwnProps\n>;\n\nconst RovingFocusGroup = React.forwardRef((props, forwardedRef) => {\n  return (\n    <CollectionProvider>\n      <CollectionSlot>\n        <RovingFocusGroupImpl {...props} ref={forwardedRef} />\n      </CollectionSlot>\n    </CollectionProvider>\n  );\n}) as RovingFocusGroupPrimitive;\n\nRovingFocusGroup.displayName = GROUP_NAME;\n\ntype RovingFocusGroupImplOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  RovingFocusGroupOptions & {\n    currentTabStopId?: string | null;\n    defaultCurrentTabStopId?: string;\n    onCurrentTabStopIdChange?: (tabStopId: string | null) => void;\n    onEntryFocus?: (event: Event) => void;\n  }\n>;\n\ntype RovingFocusGroupImplPrimitive = Polymorphic.ForwardRefComponent<\n  typeof GROUP_DEFAULT_TAG,\n  RovingFocusGroupImplOwnProps\n>;\n\nconst RovingFocusGroupImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    as = GROUP_DEFAULT_TAG,\n    orientation,\n    dir = 'ltr',\n    loop = false,\n    currentTabStopId: currentTabStopIdProp,\n    defaultCurrentTabStopId,\n    onCurrentTabStopIdChange,\n    onEntryFocus,\n    ...groupProps\n  } = props;\n  const ref = React.useRef<React.ElementRef<typeof RovingFocusGroup>>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [currentTabStopId = null, setCurrentTabStopId] = useControllableState({\n    prop: currentTabStopIdProp,\n    defaultProp: defaultCurrentTabStopId,\n    onChange: onCurrentTabStopIdChange,\n  });\n  const [isTabbingBackOut, setIsTabbingBackOut] = React.useState(false);\n  const handleEntryFocus = useCallbackRef(onEntryFocus);\n  const { getItems } = useCollection();\n  const isClickFocusRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      node.addEventListener(ENTRY_FOCUS, handleEntryFocus);\n      return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);\n    }\n  }, [handleEntryFocus]);\n\n  return (\n    <RovingFocusProvider\n      orientation={orientation}\n      dir={dir}\n      loop={loop}\n      currentTabStopId={currentTabStopId}\n      onItemFocus={React.useCallback((tabStopId) => setCurrentTabStopId(tabStopId), [\n        setCurrentTabStopId,\n      ])}\n      onItemShiftTab={React.useCallback(() => setIsTabbingBackOut(true), [])}\n    >\n      <Primitive\n        tabIndex={isTabbingBackOut ? -1 : 0}\n        aria-orientation={orientation}\n        data-orientation={orientation}\n        {...groupProps}\n        as={as}\n        ref={composedRefs}\n        style={{ outline: 'none', ...props.style }}\n        onMouseDown={composeEventHandlers(props.onMouseDown, () => {\n          isClickFocusRef.current = true;\n        })}\n        onFocus={composeEventHandlers(props.onFocus, (event) => {\n          // We normally wouldn't need this check, because we already check\n          // that the focus is on the current target and not bubbling to it.\n          // We do this because Safari doesn't focus buttons when clicked, and\n          // instead, the wrapper will get focused and not through a bubbling event.\n          const isKeyboardFocus = !isClickFocusRef.current;\n\n          if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {\n            const entryFocusEvent = new Event(ENTRY_FOCUS, EVENT_OPTIONS);\n            event.currentTarget.dispatchEvent(entryFocusEvent);\n\n            if (!entryFocusEvent.defaultPrevented) {\n              const items = getItems().filter((item) => item.focusable);\n              const activeItem = items.find((item) => item.active);\n              const currentItem = items.find((item) => item.id === currentTabStopId);\n              const candidateItems = [activeItem, currentItem, ...items].filter(\n                Boolean\n              ) as typeof items;\n              const candidateNodes = candidateItems.map((item) => item.ref.current!);\n              focusFirst(candidateNodes);\n            }\n          }\n\n          isClickFocusRef.current = false;\n        })}\n        onBlur={composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))}\n      />\n    </RovingFocusProvider>\n  );\n}) as RovingFocusGroupImplPrimitive;\n\n/* -------------------------------------------------------------------------------------------------\n * RovingFocusItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RovingFocusItem';\nconst ITEM_DEFAULT_TAG = 'span';\n\ntype RovingFocusItemOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  {\n    focusable?: boolean;\n    active?: boolean;\n  }\n>;\n\ntype RovingFocusItemPrimitive = Polymorphic.ForwardRefComponent<\n  typeof ITEM_DEFAULT_TAG,\n  RovingFocusItemOwnProps\n>;\n\nconst RovingFocusItem = React.forwardRef((props, forwardedRef) => {\n  const { as = ITEM_DEFAULT_TAG, focusable = true, active = false, ...itemProps } = props;\n  const id = useId();\n  const context = useRovingFocusContext(ITEM_NAME);\n  const isCurrentTabStop = context.currentTabStopId === id;\n  const { getItems } = useCollection();\n\n  return (\n    <CollectionItemSlot id={id} focusable={focusable} active={active}>\n      <Primitive\n        tabIndex={isCurrentTabStop ? 0 : -1}\n        data-orientation={context.orientation}\n        {...itemProps}\n        as={as}\n        ref={forwardedRef}\n        onMouseDown={composeEventHandlers(props.onMouseDown, (event) => {\n          // We prevent focusing non-focusable items on `mousedown`.\n          // Even though the item has tabIndex={-1}, that only means take it out of the tab order.\n          if (!focusable) event.preventDefault();\n          // Safari doesn't focus a button when clicked so we run our logic on mousedown also\n          else context.onItemFocus(id);\n        })}\n        onFocus={composeEventHandlers(props.onFocus, () => context.onItemFocus(id))}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          if (event.key === 'Tab' && event.shiftKey) {\n            context.onItemShiftTab();\n            return;\n          }\n\n          if (event.target !== event.currentTarget) return;\n\n          const focusIntent = getFocusIntent(event, context.orientation, context.dir);\n\n          if (focusIntent !== undefined) {\n            event.preventDefault();\n            const items = getItems().filter((item) => item.focusable);\n            let candidateNodes = items.map((item) => item.ref.current!);\n\n            if (focusIntent === 'last') candidateNodes.reverse();\n            else if (focusIntent === 'prev' || focusIntent === 'next') {\n              if (focusIntent === 'prev') candidateNodes.reverse();\n              const currentIndex = candidateNodes.indexOf(event.currentTarget);\n              candidateNodes = context.loop\n                ? wrapArray(candidateNodes, currentIndex + 1)\n                : candidateNodes.slice(currentIndex + 1);\n            }\n\n            /**\n             * Imperative focus during keydown is risky so we prevent React's batching updates\n             * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n             */\n            setTimeout(() => focusFirst(candidateNodes));\n          }\n        })}\n      />\n    </CollectionItemSlot>\n  );\n}) as RovingFocusItemPrimitive;\n\nRovingFocusItem.displayName = ITEM_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\n// prettier-ignore\nconst MAP_KEY_TO_FOCUS_INTENT: Record<string, FocusIntent> = {\n  ArrowLeft: 'prev', ArrowUp: 'prev',\n  ArrowRight: 'next', ArrowDown: 'next',\n  PageUp: 'first', Home: 'first',\n  PageDown: 'last', End: 'last',\n};\n\nfunction getDirectionAwareKey(key: string, dir?: Direction) {\n  if (dir !== 'rtl') return key;\n  return key === 'ArrowLeft' ? 'ArrowRight' : key === 'ArrowRight' ? 'ArrowLeft' : key;\n}\n\ntype FocusIntent = 'first' | 'last' | 'prev' | 'next';\n\nfunction getFocusIntent(event: React.KeyboardEvent, orientation?: Orientation, dir?: Direction) {\n  const key = getDirectionAwareKey(event.key, dir);\n  if (orientation === 'vertical' && ['ArrowLeft', 'ArrowRight'].includes(key)) return undefined;\n  if (orientation === 'horizontal' && ['ArrowUp', 'ArrowDown'].includes(key)) return undefined;\n  return MAP_KEY_TO_FOCUS_INTENT[key];\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n  for (const candidate of candidates) {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n    candidate.focus();\n    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n  }\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = RovingFocusGroup;\nconst Item = RovingFocusItem;\n\nexport {\n  RovingFocusGroup,\n  RovingFocusItem,\n  //\n  Root,\n  Item,\n};\nexport type { RovingFocusGroupPrimitive, RovingFocusItemPrimitive };\n"],"names":["dest","source","a","Object","keys","forEach","key","defineProperty","enumerable","get","__esModule","default","EVENT_OPTIONS","bubbles","cancelable","CollectionProvider","CollectionSlot","CollectionItemSlot","useCollection","createCollection","GROUP_DEFAULT_TAG","RovingFocusProvider","useRovingFocusContext","createContext","RovingFocusGroup","React","forwardRef","props","forwardedRef","_react","createElement","$e775be37c80f9cb18a9ef43638f10ed0$var$CollectionProvider","$e775be37c80f9cb18a9ef43638f10ed0$var$CollectionSlot","$e775be37c80f9cb18a9ef43638f10ed0$var$RovingFocusGroupImpl","_babelRuntimeHelpersExtends","ref","RovingFocusGroupImpl","as","orientation","dir","loop","currentTabStopId","currentTabStopIdProp","defaultCurrentTabStopId","onCurrentTabStopIdChange","onEntryFocus","groupProps","useRef","composedRefs","useComposedRefs","setCurrentTabStopId","useControllableState","prop","defaultProp","onChange","isTabbingBackOut","setIsTabbingBackOut","useState","handleEntryFocus","useCallbackRef","getItems","isClickFocusRef","useEffect","node","current","addEventListener","removeEventListener","$e775be37c80f9cb18a9ef43638f10ed0$var$RovingFocusProvider","onItemFocus","useCallback","tabStopId","onItemShiftTab","Primitive","tabIndex","aria-orientation","data-orientation","style","outline","onMouseDown","composeEventHandlers","onFocus","event","isKeyboardFocus","target","currentTarget","entryFocusEvent","Event","dispatchEvent","defaultPrevented","items","filter","item","focusable","focusFirst","find","active","id","Boolean","map","onBlur","ITEM_DEFAULT_TAG","RovingFocusItem","itemProps","useId","context","isCurrentTabStop","$e775be37c80f9cb18a9ef43638f10ed0$var$CollectionItemSlot","preventDefault","onKeyDown","shiftKey","focusIntent","getDirectionAwareKey","includes","MAP_KEY_TO_FOCUS_INTENT","getFocusIntent","undefined","candidateNodes","reverse","currentIndex","indexOf","startIndex","array","_","index","length","slice","setTimeout","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","PageUp","Home","PageDown","End","candidates","PREVIOUSLY_FOCUSED_ELEMENT","document","activeElement","candidate","focus","Root","Item"],"version":3,"file":"index.js.map"}