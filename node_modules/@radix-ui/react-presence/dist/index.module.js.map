{"mappings":"kKAUA,MAAMA,SAAqCC,IACzC,MAAMC,QAAEA,EAAFC,SAAWA,GAAaF,EACxBG,EAiBR,SAAqBF,GACnB,MAAOG,EAAMC,GAAWC,EAAMC,WACxBC,EAAYF,EAAMG,OAA4B,IAC9CC,EAAiBJ,EAAMG,OAAOR,GAC9BU,EAAuBL,EAAMG,SAC7BG,EAAeX,EAAU,UAAY,aACpCY,EAAOC,GCxBT,SACLF,EACAG,GAEA,OAAOT,EAAMU,YAAW,CAACH,EAAwBI,KAC/C,MAAMC,EAAaH,EAAQF,GAAeI,GAC1C,OAAOC,MAAAA,EAAAA,EAAaL,IACnBD,GDiBmBO,CAAgBP,EAAc,CAClDQ,QAAS,CACPC,QAAS,YACTC,cAAe,oBAEjBC,iBAAkB,CAChBC,MAAO,UACPC,cAAe,aAEjBC,UAAW,CACTF,MAAO,aAyEX,OArEAG,GAAgB,KACd,MAAMC,EAASpB,EAAUqB,QACnBC,EAAapB,EAAemB,QAGlC,GAF0BC,IAAe7B,EAElB,CACrB,MAAM8B,EAAoBpB,EAAqBkB,QACzCG,EAAuBC,EAAiBL,GAE9C,GAAI3B,EACFa,EAAK,cACA,GAA6B,SAAzBkB,GAAuD,UAApBJ,MAAAA,OAAA,EAAAA,EAAQM,SAGpDpB,EAAK,eACA,CAOL,MAAMqB,EAAcJ,IAAsBC,EAGxClB,EADEgB,GAAcK,EACX,gBAEA,WAITzB,EAAemB,QAAU5B,KAE1B,CAACA,EAASa,IAEba,GAAgB,KACd,GAAIvB,EAAM,CAMR,MAAMgC,EAAsBnB,IAC1B,MACMoB,EADuBJ,EAAiBzB,EAAUqB,SACRS,SAASrB,EAAMsB,eAC3DtB,EAAMuB,SAAWpC,GAAQiC,GAC3BvB,EAAK,kBAIH2B,EAAwBxB,IACxBA,EAAMuB,SAAWpC,IAEnBO,EAAqBkB,QAAUI,EAAiBzB,EAAUqB,WAQ9D,OAJAzB,EAAKsC,iBAAiB,iBAAkBD,GACxCrC,EAAKsC,iBAAiB,kBAAmBN,GACzChC,EAAKsC,iBAAiB,eAAgBN,GAE/B,KACLhC,EAAKuC,oBAAoB,iBAAkBF,GAC3CrC,EAAKuC,oBAAoB,kBAAmBP,GAC5ChC,EAAKuC,oBAAoB,eAAgBP,OAG5C,CAAChC,EAAMU,IAEH,CACL8B,UAAW,CAAC,UAAW,oBAAoBN,SAASzB,GACpDgC,IAAKvC,EAAMwC,aAAa1C,IAClBA,IACFI,EAAUqB,QAAUkB,iBAAiB3C,GACrCC,EAAQD,MAET,KAjHY4C,CAAY/C,GAEvBgD,EAA6B,mBAAb/C,EAClBA,EAAS,CAAED,QAASE,EAASyC,YAC7BtC,EAAM4C,SAASC,KAAKjD,GAElB2C,EAAMO,EAAgBjD,EAAS0C,IAAMI,EAAcJ,KAEzD,MADuC,mBAAb3C,GACLC,EAASyC,uBAAYtC,EAAM+C,aAAaJ,EAAO,CAAEJ,IAAAA,IAAS,MA+GjF,SAASZ,EAAiBL,GACxB,OAAOA,MAAAA,OAAA,EAAAA,EAAQW,gBAAiB,OA7GlCxC,SAASuD,YAAc","sources":["./packages/react/presence/src/Presence.tsx","./packages/react/presence/src/useStateMachine.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useStateMachine } from './useStateMachine';\n\ntype PresenceProps = {\n  present: boolean;\n  children: React.ReactElement | ((props: { present: boolean }) => React.ReactElement);\n};\n\nconst Presence: React.FC<PresenceProps> = (props) => {\n  const { present, children } = props;\n  const presence = usePresence(present);\n\n  const child = (typeof children === 'function'\n    ? children({ present: presence.isPresent })\n    : React.Children.only(children)) as React.ReactElement;\n\n  const ref = useComposedRefs(presence.ref, (child as any).ref);\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? React.cloneElement(child, { ref }) : null;\n};\n\nPresence.displayName = 'Presence';\n\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\n\nfunction usePresence(present: boolean) {\n  const [node, setNode] = React.useState<HTMLElement>();\n  const stylesRef = React.useRef<CSSStyleDeclaration>({} as any);\n  const prevPresentRef = React.useRef(present);\n  const prevAnimationNameRef = React.useRef<string>();\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = useStateMachine(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended',\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted',\n    },\n    unmounted: {\n      MOUNT: 'mounted',\n    },\n  });\n\n  useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = getAnimationName(styles);\n\n      if (present) {\n        send('MOUNT');\n      } else if (currentAnimationName === 'none' || styles?.display === 'none') {\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');\n      } else {\n        /**\n         * When `present` changes to `false`, we check changes to animation-name to\n         * determine whether an animation has started. We chose this approach (reading\n         * computed styles) because there is no `animationrun` event and `animationstart`\n         * fires after `animation-delay` has expired which would be too late.\n         */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n\n        if (wasPresent && isAnimating) {\n          send('ANIMATION_OUT');\n        } else {\n          send('UNMOUNT');\n        }\n      }\n\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n\n  useLayoutEffect(() => {\n    if (node) {\n      /**\n       * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n       * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n       * make sure we only trigger ANIMATION_END for the currently active animation.\n       */\n      const handleAnimationEnd = (event: AnimationEvent) => {\n        const currentAnimationName = getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node && isCurrentAnimation) {\n          send('ANIMATION_END');\n        }\n      };\n\n      const handleAnimationStart = (event: AnimationEvent) => {\n        if (event.target === node) {\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n        }\n      };\n\n      node.addEventListener('animationstart', handleAnimationStart);\n      node.addEventListener('animationcancel', handleAnimationEnd);\n      node.addEventListener('animationend', handleAnimationEnd);\n\n      return () => {\n        node.removeEventListener('animationstart', handleAnimationStart);\n        node.removeEventListener('animationcancel', handleAnimationEnd);\n        node.removeEventListener('animationend', handleAnimationEnd);\n      };\n    }\n  }, [node, send]);\n\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: React.useCallback((node: HTMLElement) => {\n      if (node) {\n        stylesRef.current = getComputedStyle(node);\n        setNode(node);\n      }\n    }, []),\n  };\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getAnimationName(styles?: CSSStyleDeclaration) {\n  return styles?.animationName || 'none';\n}\n\nexport { Presence };\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// ðŸ¤¯ https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"],"names":["Presence","props","present","children","presence","node","setNode","React","useState","stylesRef","useRef","prevPresentRef","prevAnimationNameRef","initialState","state","send","machine","useReducer","event","nextState","$d88c0747af12355025ed3195fb48c68a$export$useStateMachine","mounted","UNMOUNT","ANIMATION_OUT","unmountSuspended","MOUNT","ANIMATION_END","unmounted","useLayoutEffect","styles","current","wasPresent","prevAnimationName","currentAnimationName","getAnimationName","display","isAnimating","handleAnimationEnd","isCurrentAnimation","includes","animationName","target","handleAnimationStart","addEventListener","removeEventListener","isPresent","ref","useCallback","getComputedStyle","usePresence","child","Children","only","useComposedRefs","cloneElement","displayName"],"version":3,"file":"index.module.js.map"}