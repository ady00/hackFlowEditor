{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/popper/src/Popper.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { getPlacementData } from '@radix-ui/popper';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useRect } from '@radix-ui/react-use-rect';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as ArrowPrimitive from '@radix-ui/react-arrow';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\nimport type { Side, Align } from '@radix-ui/popper';\nimport type { Measurable } from '@radix-ui/rect';\n\n/* -------------------------------------------------------------------------------------------------\n * Popper\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_NAME = 'Popper';\n\ntype PopperContextValue = {\n  anchor: Measurable | null;\n  onAnchorChange(anchor: Measurable | null): void;\n};\nconst [PopperProvider, usePopperContext] = createContext<PopperContextValue>(POPPER_NAME);\n\nconst Popper: React.FC = ({ children }) => {\n  const [anchor, setAnchor] = React.useState<Measurable | null>(null);\n  return (\n    <PopperProvider anchor={anchor} onAnchorChange={setAnchor}>\n      {children}\n    </PopperProvider>\n  );\n};\n\nPopper.displayName = POPPER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'PopperAnchor';\n\ntype PopperAnchorOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  { virtualRef?: React.RefObject<Measurable> }\n>;\ntype PopperAnchorPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  PopperAnchorOwnProps\n>;\n\nconst PopperAnchor = React.forwardRef((props, forwardedRef) => {\n  const { virtualRef, children, ...anchorProps } = props;\n  const context = usePopperContext(ANCHOR_NAME);\n  const ref = React.useRef<React.ElementRef<typeof Primitive>>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    // Consumer can anchor the popper to something that isn't\n    // a DOM node e.g. pointer position, so we override the\n    // `anchorRef` with their virtual ref in this case.\n    context.onAnchorChange(virtualRef?.current || ref.current);\n  });\n\n  return virtualRef ? null : (\n    <Primitive {...anchorProps} ref={composedRefs}>\n      {children}\n    </Primitive>\n  );\n}) as PopperAnchorPrimitive;\n\nPopperAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'PopperContent';\n\ntype PopperContentContextValue = {\n  arrowStyles: React.CSSProperties;\n  onArrowChange(arrow: HTMLSpanElement | null): void;\n  onArrowOffsetChange(offset?: number): void;\n};\n\nconst [PopperContentProvider, useContentContext] = createContext<PopperContentContextValue>(\n  CONTENT_NAME\n);\n\ntype PopperContentOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  {\n    side?: Side;\n    sideOffset?: number;\n    align?: Align;\n    alignOffset?: number;\n    collisionTolerance?: number;\n    avoidCollisions?: boolean;\n  }\n>;\n\ntype PopperContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  PopperContentOwnProps\n>;\n\nconst PopperContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    side = 'bottom',\n    sideOffset,\n    align = 'center',\n    alignOffset,\n    collisionTolerance,\n    avoidCollisions = true,\n    ...contentProps\n  } = props;\n\n  const context = usePopperContext(CONTENT_NAME);\n  const [arrowOffset, setArrowOffset] = React.useState<number>();\n  const anchorRect = useRect(context.anchor);\n  const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n  const contentSize = useSize(content);\n  const [arrow, setArrow] = React.useState<HTMLSpanElement | null>(null);\n  const arrowSize = useSize(arrow);\n\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n\n  const windowSize = useWindowSize();\n  const collisionBoundariesRect = windowSize\n    ? DOMRect.fromRect({ ...windowSize, x: 0, y: 0 })\n    : undefined;\n\n  const { popperStyles, arrowStyles, placedSide, placedAlign } = getPlacementData({\n    anchorRect,\n    popperSize: contentSize,\n    arrowSize,\n\n    // config\n    arrowOffset,\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    shouldAvoidCollisions: avoidCollisions,\n    collisionBoundariesRect,\n    collisionTolerance,\n  });\n  const isPlaced = placedSide !== undefined;\n\n  return (\n    <div style={popperStyles} data-radix-popper-content-wrapper=\"\">\n      <PopperContentProvider\n        arrowStyles={arrowStyles}\n        onArrowChange={setArrow}\n        onArrowOffsetChange={setArrowOffset}\n      >\n        <Primitive\n          data-side={placedSide}\n          data-align={placedAlign}\n          {...contentProps}\n          style={{\n            ...contentProps.style,\n            // if the PopperContent hasn't been placed yet (not all measurements done)\n            // we prevent animations so that users's animation don't kick in too early referring wrong sides\n            animation: !isPlaced ? 'none' : undefined,\n          }}\n          ref={composedRefs}\n        />\n      </PopperContentProvider>\n    </div>\n  );\n}) as PopperContentPrimitive;\n\nPopperContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopperArrow';\n\ntype PopperArrowOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof ArrowPrimitive.Root>,\n  { offset?: number }\n>;\n\ntype PopperArrowPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof ArrowPrimitive.Root>,\n  PopperArrowOwnProps\n>;\n\nconst PopperArrow = React.forwardRef(function PopperArrow(props, forwardedRef) {\n  const { offset, ...arrowProps } = props;\n  const context = useContentContext(ARROW_NAME);\n  const { onArrowOffsetChange } = context;\n\n  // send the Arrow's offset up to Popper\n  React.useEffect(() => onArrowOffsetChange(offset), [onArrowOffsetChange, offset]);\n\n  return (\n    <span style={{ ...context.arrowStyles, pointerEvents: 'none' }}>\n      <span\n        // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)\n        // doesn't report size as we'd expect on SVG elements.\n        // it reports their bounding box which is effectively the largest path inside the SVG.\n        ref={context.onArrowChange}\n        style={{\n          display: 'inline-block',\n          verticalAlign: 'top',\n          pointerEvents: 'auto',\n        }}\n      >\n        <ArrowPrimitive.Root\n          {...arrowProps}\n          ref={forwardedRef}\n          style={{\n            ...arrowProps.style,\n            // ensures the element can be measured correctly (mostly for if SVG)\n            display: 'block',\n          }}\n        />\n      </span>\n    </span>\n  );\n}) as PopperArrowPrimitive;\n\nPopperArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS = 100;\n\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = React.useState<{ width: number; height: number } | undefined>(\n    undefined\n  );\n\n  React.useEffect(() => {\n    let debounceTimerId: number;\n\n    function updateWindowSize() {\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    function handleResize() {\n      window.clearTimeout(debounceTimerId);\n      debounceTimerId = window.setTimeout(updateWindowSize, WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS);\n    }\n\n    updateWindowSize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowSize;\n}\n\nconst Root = Popper;\nconst Anchor = PopperAnchor;\nconst Content = PopperContent;\nconst Arrow = PopperArrow;\n\nexport {\n  Popper,\n  PopperAnchor,\n  PopperContent,\n  PopperArrow,\n  //\n  Root,\n  Anchor,\n  Content,\n  Arrow,\n};\nexport type { PopperAnchorPrimitive, PopperContentPrimitive, PopperArrowPrimitive };\n"],"names":["a","__esModule","default","$parcel$exportWildcard","dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","PopperProvider","usePopperContext","createContext","Popper","children","anchor","setAnchor","React","useState","_react","createElement","$be5d7b5e9bdca855ae0500ff2a345d73$var$PopperProvider","onAnchorChange","PopperAnchor","forwardRef","props","forwardedRef","virtualRef","anchorProps","context","ref","useRef","composedRefs","useComposedRefs","useEffect","current","Primitive","_babelRuntimeHelpersExtends","PopperContentProvider","useContentContext","PopperContent","side","sideOffset","align","alignOffset","collisionTolerance","avoidCollisions","contentProps","arrowOffset","setArrowOffset","anchorRect","useRect","content","setContent","contentSize","useSize","arrow","setArrow","arrowSize","node","windowSize","setWindowSize","undefined","debounceTimerId","updateWindowSize","width","window","innerWidth","height","innerHeight","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","useWindowSize","collisionBoundariesRect","DOMRect","fromRect","x","y","popperStyles","arrowStyles","placedSide","placedAlign","getPlacementData","popperSize","shouldAvoidCollisions","isPlaced","style","data-radix-popper-content-wrapper","$be5d7b5e9bdca855ae0500ff2a345d73$var$PopperContentProvider","onArrowChange","onArrowOffsetChange","data-side","data-align","animation","PopperArrow","offset","arrowProps","pointerEvents","display","verticalAlign","_radixUiReactArrow","Root","Anchor","Content","Arrow"],"version":3,"file":"index.js.map"}