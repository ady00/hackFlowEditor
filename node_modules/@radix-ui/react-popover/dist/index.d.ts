import * as React from "react";
import * as PopperPrimitive from "@radix-ui/react-popper";
import { DismissableLayer } from "@radix-ui/react-dismissable-layer";
import { FocusScope } from "@radix-ui/react-focus-scope";
import { Primitive } from "@radix-ui/react-primitive";
import * as Polymorphic from "@radix-ui/react-polymorphic";
type PopoverOwnProps = {
    open?: boolean;
    defaultOpen?: boolean;
    onOpenChange?: (open: boolean) => void;
    modal?: boolean;
};
export const Popover: React.FC<PopoverOwnProps>;
type PopoverAnchorOwnProps = Polymorphic.OwnProps<typeof PopperPrimitive.Anchor>;
export type PopoverAnchorPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof PopperPrimitive.Anchor>, PopoverAnchorOwnProps>;
export const PopoverAnchor: PopoverAnchorPrimitive;
declare const TRIGGER_DEFAULT_TAG = "button";
type PopoverTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;
export type PopoverTriggerPrimitive = Polymorphic.ForwardRefComponent<typeof TRIGGER_DEFAULT_TAG, PopoverTriggerOwnProps>;
export const PopoverTrigger: PopoverTriggerPrimitive;
type PopoverContentOwnProps = Polymorphic.Merge<Polymorphic.OwnProps<typeof PopoverContentModal | typeof PopoverContentNonModal>, {
    /**
     * Used to force mounting when more control is needed. Useful when
     * controlling animation with React animation libraries.
     */
    forceMount?: true;
}>;
export type PopoverContentPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof PopoverContentModal | typeof PopoverContentNonModal>, PopoverContentOwnProps>;
export const PopoverContent: PopoverContentPrimitive;
type PopoverContentTypeOwnProps = Polymorphic.Merge<Omit<Polymorphic.OwnProps<typeof PopoverContentImpl>, 'trapFocus' | 'disableOutsidePointerEvents'>, {
    /**
     * Whether the `Popover` should render in a `Portal`
     * (default: `true`)
     */
    portalled?: boolean;
}>;
type PopoverContentTypePrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof PopoverContentImpl>, PopoverContentTypeOwnProps>;
declare const PopoverContentModal: PopoverContentTypePrimitive;
declare const PopoverContentNonModal: PopoverContentTypePrimitive;
type FocusScopeOwnProps = Polymorphic.OwnProps<typeof FocusScope>;
type DismissableLayerOwnProps = Polymorphic.OwnProps<typeof DismissableLayer>;
type PopperPrimitiveOwnProps = Polymorphic.OwnProps<typeof PopperPrimitive.Content>;
type PopoverContentImplOwnProps = Polymorphic.Merge<PopperPrimitiveOwnProps, Omit<DismissableLayerOwnProps, 'onDismiss'> & {
    /**
     * Whether focus should be trapped within the `Popover`
     * (default: false)
     */
    trapFocus?: FocusScopeOwnProps['trapped'];
    /**
     * Event handler called when auto-focusing on open.
     * Can be prevented.
     */
    onOpenAutoFocus?: FocusScopeOwnProps['onMountAutoFocus'];
    /**
     * Event handler called when auto-focusing on close.
     * Can be prevented.
     */
    onCloseAutoFocus?: FocusScopeOwnProps['onUnmountAutoFocus'];
}>;
type PopoverContentImplPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof PopperPrimitive.Content>, PopoverContentImplOwnProps>;
declare const PopoverContentImpl: PopoverContentImplPrimitive;
declare const CLOSE_DEFAULT_TAG = "button";
type PopoverCloseOwnProps = Polymorphic.OwnProps<typeof Primitive>;
export type PopoverClosePrimitive = Polymorphic.ForwardRefComponent<typeof CLOSE_DEFAULT_TAG, PopoverCloseOwnProps>;
export const PopoverClose: PopoverClosePrimitive;
export const PopoverArrow: import("@radix-ui/react-primitive").ExtendedPrimitive<PopperPrimitive.PopperArrowPrimitive, "svg">;
export const Root: React.FC<PopoverOwnProps>;
export const Anchor: PopoverAnchorPrimitive;
export const Trigger: PopoverTriggerPrimitive;
export const Content: PopoverContentPrimitive;
export const Close: PopoverClosePrimitive;
export const Arrow: import("@radix-ui/react-primitive").ExtendedPrimitive<PopperPrimitive.PopperArrowPrimitive, "svg">;

//# sourceMappingURL=index.d.ts.map
