{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/popover/src/Popover.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal } from '@radix-ui/react-portal';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive, extendPrimitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useId } from '@radix-ui/react-id';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\n/* -------------------------------------------------------------------------------------------------\n * Popover\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPOVER_NAME = 'Popover';\n\ntype PopoverContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  hasCustomAnchor: boolean;\n  onCustomAnchorAdd(): void;\n  onCustomAnchorRemove(): void;\n  modal: boolean;\n};\n\nconst [PopoverProvider, usePopoverContext] = createContext<PopoverContextValue>(POPOVER_NAME);\n\ntype PopoverOwnProps = {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  modal?: boolean;\n};\n\nconst Popover: React.FC<PopoverOwnProps> = (props) => {\n  const { children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <PopperPrimitive.Root>\n      <PopoverProvider\n        contentId={useId()}\n        triggerRef={triggerRef}\n        open={open}\n        onOpenChange={setOpen}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n        hasCustomAnchor={hasCustomAnchor}\n        onCustomAnchorAdd={React.useCallback(() => setHasCustomAnchor(true), [])}\n        onCustomAnchorRemove={React.useCallback(() => setHasCustomAnchor(false), [])}\n        modal={modal}\n      >\n        {children}\n      </PopoverProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nPopover.displayName = POPOVER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'PopoverAnchor';\n\ntype PopoverAnchorOwnProps = Polymorphic.OwnProps<typeof PopperPrimitive.Anchor>;\ntype PopoverAnchorPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof PopperPrimitive.Anchor>,\n  PopoverAnchorOwnProps\n>;\n\nconst PopoverAnchor = React.forwardRef((props, forwardedRef) => {\n  const context = usePopoverContext(ANCHOR_NAME);\n  const { onCustomAnchorAdd, onCustomAnchorRemove } = context;\n\n  React.useEffect(() => {\n    onCustomAnchorAdd();\n    return () => onCustomAnchorRemove();\n  }, [onCustomAnchorAdd, onCustomAnchorRemove]);\n\n  return <PopperPrimitive.Anchor {...props} ref={forwardedRef} />;\n}) as PopoverAnchorPrimitive;\n\nPopoverAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'PopoverTrigger';\nconst TRIGGER_DEFAULT_TAG = 'button';\n\ntype PopoverTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype PopoverTriggerPrimitive = Polymorphic.ForwardRefComponent<\n  typeof TRIGGER_DEFAULT_TAG,\n  PopoverTriggerOwnProps\n>;\n\nconst PopoverTrigger = React.forwardRef((props, forwardedRef) => {\n  const { as = TRIGGER_DEFAULT_TAG, ...triggerProps } = props;\n  const context = usePopoverContext(TRIGGER_NAME);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n\n  const trigger = (\n    <Primitive\n      type=\"button\"\n      aria-haspopup=\"dialog\"\n      aria-expanded={context.open}\n      aria-controls={context.contentId}\n      data-state={getState(context.open)}\n      {...triggerProps}\n      as={as}\n      ref={composedTriggerRef}\n      onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n    />\n  );\n\n  return context.hasCustomAnchor ? (\n    trigger\n  ) : (\n    <PopperPrimitive.Anchor as={Slot}>{trigger}</PopperPrimitive.Anchor>\n  );\n}) as PopoverTriggerPrimitive;\n\nPopoverTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'PopoverContent';\n\ntype PopoverContentOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof PopoverContentModal | typeof PopoverContentNonModal>,\n  {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n  }\n>;\n\ntype PopoverContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof PopoverContentModal | typeof PopoverContentNonModal>,\n  PopoverContentOwnProps\n>;\n\nconst PopoverContent = React.forwardRef((props, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = usePopoverContext(CONTENT_NAME);\n\n  return (\n    <Presence present={forceMount || context.open}>\n      {context.modal ? (\n        <PopoverContentModal {...contentProps} ref={forwardedRef} />\n      ) : (\n        <PopoverContentNonModal {...contentProps} ref={forwardedRef} />\n      )}\n    </Presence>\n  );\n}) as PopoverContentPrimitive;\n\nPopoverContent.displayName = CONTENT_NAME;\n\ntype PopoverContentTypeOwnProps = Polymorphic.Merge<\n  Omit<\n    Polymorphic.OwnProps<typeof PopoverContentImpl>,\n    'trapFocus' | 'disableOutsidePointerEvents'\n  >,\n  {\n    /**\n     * Whether the `Popover` should render in a `Portal`\n     * (default: `true`)\n     */\n    portalled?: boolean;\n  }\n>;\n\ntype PopoverContentTypePrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof PopoverContentImpl>,\n  PopoverContentTypeOwnProps\n>;\n\nconst PopoverContentModal = React.forwardRef((props, forwardedRef) => {\n  const { portalled = true, ...contentModalProps } = props;\n  const context = usePopoverContext(CONTENT_NAME);\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  const isRightClickOutsideRef = React.useRef(false);\n\n  // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n\n  const PortalWrapper = portalled ? Portal : React.Fragment;\n\n  return (\n    <PortalWrapper>\n      <RemoveScroll>\n        <PopoverContentImpl\n          {...contentModalProps}\n          ref={composedRefs}\n          // we make sure we're not trapping once it's been closed\n          // (closed !== unmounted when animating out)\n          trapFocus={context.open}\n          disableOutsidePointerEvents\n          onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n            event.preventDefault();\n            if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();\n          })}\n          onPointerDownOutside={composeEventHandlers(\n            props.onPointerDownOutside,\n            (event) => {\n              const originalEvent = event.detail.originalEvent;\n              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n              isRightClickOutsideRef.current = isRightClick;\n            },\n            { checkForDefaultPrevented: false }\n          )}\n          // When focus is trapped, a `focusout` event may still happen.\n          // We make sure we don't trigger our `onDismiss` in such case.\n          onFocusOutside={composeEventHandlers(\n            props.onFocusOutside,\n            (event) => event.preventDefault(),\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </RemoveScroll>\n    </PortalWrapper>\n  );\n}) as PopoverContentTypePrimitive;\n\nconst PopoverContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const { portalled = true, ...contentNonModalProps } = props;\n  const context = usePopoverContext(CONTENT_NAME);\n  const hasInteractedOutsideRef = React.useRef(false);\n\n  const PortalWrapper = portalled ? Portal : React.Fragment;\n\n  return (\n    <PortalWrapper>\n      <PopoverContentImpl\n        {...contentNonModalProps}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) hasInteractedOutsideRef.current = true;\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          //\n          // We use `onInteractOutside` as some browsers also\n          // focus on pointer down, creating the same issue.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n        }}\n      />\n    </PortalWrapper>\n  );\n}) as PopoverContentTypePrimitive;\n\ntype FocusScopeOwnProps = Polymorphic.OwnProps<typeof FocusScope>;\ntype DismissableLayerOwnProps = Polymorphic.OwnProps<typeof DismissableLayer>;\n\ntype PopperPrimitiveOwnProps = Polymorphic.OwnProps<typeof PopperPrimitive.Content>;\ntype PopoverContentImplOwnProps = Polymorphic.Merge<\n  PopperPrimitiveOwnProps,\n  Omit<DismissableLayerOwnProps, 'onDismiss'> & {\n    /**\n     * Whether focus should be trapped within the `Popover`\n     * (default: false)\n     */\n    trapFocus?: FocusScopeOwnProps['trapped'];\n\n    /**\n     * Event handler called when auto-focusing on open.\n     * Can be prevented.\n     */\n    onOpenAutoFocus?: FocusScopeOwnProps['onMountAutoFocus'];\n\n    /**\n     * Event handler called when auto-focusing on close.\n     * Can be prevented.\n     */\n    onCloseAutoFocus?: FocusScopeOwnProps['onUnmountAutoFocus'];\n  }\n>;\n\ntype PopoverContentImplPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof PopperPrimitive.Content>,\n  PopoverContentImplOwnProps\n>;\n\nconst PopoverContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    trapFocus,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    disableOutsidePointerEvents,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = usePopoverContext(CONTENT_NAME);\n\n  // Make sure the whole tree has focus guards as our `Popover` may be\n  // the last element in the DOM (beacuse of the `Portal`)\n  useFocusGuards();\n\n  return (\n    <FocusScope\n      as={Slot}\n      loop\n      trapped={trapFocus}\n      onMountAutoFocus={onOpenAutoFocus}\n      onUnmountAutoFocus={onCloseAutoFocus}\n    >\n      <DismissableLayer\n        as={Slot}\n        disableOutsidePointerEvents={disableOutsidePointerEvents}\n        onInteractOutside={onInteractOutside}\n        onEscapeKeyDown={onEscapeKeyDown}\n        onPointerDownOutside={onPointerDownOutside}\n        onFocusOutside={onFocusOutside}\n        onDismiss={() => context.onOpenChange(false)}\n      >\n        <PopperPrimitive.Content\n          data-state={getState(context.open)}\n          role=\"dialog\"\n          id={context.contentId}\n          {...contentProps}\n          ref={forwardedRef}\n          style={{\n            ...contentProps.style,\n            // re-namespace exposed content custom property\n            ['--radix-popover-content-transform-origin' as any]: 'var(--radix-popper-transform-origin)',\n          }}\n        />\n      </DismissableLayer>\n    </FocusScope>\n  );\n}) as PopoverContentImplPrimitive;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'PopoverClose';\nconst CLOSE_DEFAULT_TAG = 'button';\n\ntype PopoverCloseOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype PopoverClosePrimitive = Polymorphic.ForwardRefComponent<\n  typeof CLOSE_DEFAULT_TAG,\n  PopoverCloseOwnProps\n>;\n\nconst PopoverClose = React.forwardRef((props, forwardedRef) => {\n  const { as = CLOSE_DEFAULT_TAG, ...closeProps } = props;\n  const context = usePopoverContext(CLOSE_NAME);\n  return (\n    <Primitive\n      type=\"button\"\n      {...closeProps}\n      as={as}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n    />\n  );\n}) as PopoverClosePrimitive;\n\nPopoverClose.displayName = CLOSE_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst PopoverArrow = extendPrimitive(PopperPrimitive.Arrow, { displayName: 'PopoverArrow' });\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Popover;\nconst Anchor = PopoverAnchor;\nconst Trigger = PopoverTrigger;\nconst Content = PopoverContent;\nconst Close = PopoverClose;\nconst Arrow = PopoverArrow;\n\nexport {\n  Popover,\n  PopoverAnchor,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverClose,\n  PopoverArrow,\n  //\n  Root,\n  Anchor,\n  Trigger,\n  Content,\n  Close,\n  Arrow,\n};\nexport type {\n  PopoverAnchorPrimitive,\n  PopoverTriggerPrimitive,\n  PopoverContentPrimitive,\n  PopoverClosePrimitive,\n};\n"],"names":["a","__esModule","default","$parcel$exportWildcard","dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","PopoverProvider","usePopoverContext","createContext","Popover","props","children","open","openProp","defaultOpen","onOpenChange","modal","triggerRef","React","useRef","hasCustomAnchor","setHasCustomAnchor","useState","setOpen","useControllableState","prop","defaultProp","onChange","_react","createElement","_radixUiReactPopper","Root","$bb8ca9d5c97a93670591f7c54ba$var$PopoverProvider","contentId","useId","onOpenToggle","useCallback","prevOpen","onCustomAnchorAdd","onCustomAnchorRemove","PopoverAnchor","forwardRef","forwardedRef","context","useEffect","Anchor","_babelRuntimeHelpersExtends","ref","TRIGGER_DEFAULT_TAG","PopoverTrigger","as","triggerProps","composedTriggerRef","useComposedRefs","trigger","Primitive","type","aria-haspopup","aria-expanded","aria-controls","data-state","getState","onClick","composeEventHandlers","Slot","PopoverContent","forceMount","contentProps","Presence","present","$bb8ca9d5c97a93670591f7c54ba$var$PopoverContentModal","$bb8ca9d5c97a93670591f7c54ba$var$PopoverContentNonModal","PopoverContentModal","portalled","contentModalProps","contentRef","composedRefs","isRightClickOutsideRef","content","current","hideOthers","PortalWrapper","Portal","Fragment","RemoveScroll","$bb8ca9d5c97a93670591f7c54ba$var$PopoverContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","_context$triggerRef$c","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","button","ctrlKey","isRightClick","checkForDefaultPrevented","onFocusOutside","PopoverContentNonModal","contentNonModalProps","hasInteractedOutsideRef","_props$onCloseAutoFoc","_context$triggerRef$c2","call","defaultPrevented","onInteractOutside","_props$onInteractOuts","_context$triggerRef$c3","target","contains","PopoverContentImpl","onOpenAutoFocus","onEscapeKeyDown","useFocusGuards","FocusScope","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","DismissableLayer","onDismiss","Content","role","id","style","--radix-popover-content-transform-origin","CLOSE_DEFAULT_TAG","PopoverClose","closeProps","PopoverArrow","extendPrimitive","PopperPrimitive","Arrow","displayName","Trigger","Close"],"version":3,"file":"index.js.map"}