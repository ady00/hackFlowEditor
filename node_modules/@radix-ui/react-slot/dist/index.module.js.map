{"mappings":"4IASA,MAAMA,kBAAOC,EAAMC,YAAmC,CAACC,EAAOC,KAC5D,MAAMC,SAAEA,KAAaC,GAAcH,EAGnC,OAAoB,IAFAF,EAAMM,SAASC,MAAMH,gBAIrCI,EAAAC,cAACC,EAADC,EAAA,GAAeN,EAAf,CAA0BO,IAAKT,IAC5BC,gBAMLI,EAAAC,cAAAD,EAAAK,SAAA,KACGb,EAAMM,SAASQ,IAAIV,GAAWW,gBACzBf,EAAMgB,eAAeD,IAAUA,EAAME,OAASC,uBAE9CV,EAAAC,cAACC,EAADC,EAAA,GAAeN,EAAf,CAA0BO,IAAKT,IAC5BY,EAAMb,MAAME,UAKZW,QAMfhB,KAAKoB,YAAc,OAQnB,MAAMC,eAAYpB,EAAMC,YAAgC,CAACC,EAAOC,KAC9D,MAAMC,SAAEA,KAAaC,GAAcH,EAC7Ba,EAAQf,EAAMM,SAASe,KAAKjB,gBAElC,OAAOJ,EAAMgB,eAAeD,gBACxBf,EAAMsB,aAAaP,EAAO,IACrBQ,EAAWlB,EAAWU,EAAMb,OAC/BU,IAAKY,EAAYrB,EAAeY,EAAcH,OAEhD,QAGNQ,EAAUD,YAAc,mBAMxB,MAAMD,UAAY,EAAGd,SAAAA,KACZA,EAOT,SAASmB,EAAWlB,EAAqBoB,GAEvC,MAAMC,EAAgB,IAAKD,GAE3B,IAAK,MAAME,KAAYF,EAAY,CACjC,MAAMG,EAAgBvB,EAAUsB,GAC1BE,EAAiBJ,EAAWE,GAEhB,WAAWG,KAAKH,GAGhCD,EAAcC,GAAYI,EAAgBF,EAAgBD,GAGtC,UAAbD,IACPD,EAAcC,GAAY,IAAKC,KAAkBC,IAIrD,MAAO,IAAKxB,KAAcqB,GAK5B,SAASK,EAAgBC,EAA6BC,GACpD,OAAO,YAAwBC,GAC7BF,MAAAA,GAAAA,KAAkBE,GACcA,EAAK,aAAcC,OAASD,EAAK,GAAGE,kBAElEH,MAAAA,GAAAA,KAAiBC,WAKvB,MAAMG,KAAOtC","sources":["./packages/react/slot/src/Slot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ntype SlotProps = { children?: React.ReactNode };\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childLength = React.Children.count(children);\n\n  if (childLength === 1) {\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {children}\n      </SlotClone>\n    );\n  }\n\n  return (\n    <>\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === Slottable) {\n          return (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          );\n        }\n\n        return child;\n      })}\n    </>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ntype SlotCloneProps = { children: React.ReactNode };\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const child = React.Children.only(children);\n\n  return React.isValidElement(child)\n    ? React.cloneElement(child, {\n        ...mergeProps(slotProps, child.props),\n        ref: composeRefs(forwardedRef, (child as any).ref),\n      })\n    : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return children as React.ReactElement;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = composeHandlers(childPropValue, slotPropValue);\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\ntype EventHandler = (...args: unknown[]) => unknown;\n\nfunction composeHandlers(childHandler?: EventHandler, slotHandler?: EventHandler) {\n  return function handleEvent(...args) {\n    childHandler?.(...args);\n    const isDefaultPreventedEvent = args[0] instanceof Event && args[0].defaultPrevented;\n    if (!isDefaultPreventedEvent) {\n      slotHandler?.(...args);\n    }\n  } as EventHandler;\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\n"],"names":["Slot","React","forwardRef","props","forwardedRef","children","slotProps","Children","count","_react","createElement","$d34e8c328cb3dd19ab7a2f6eafa6ad$var$SlotClone","_babelRuntimeHelpersEsmExtends","ref","Fragment","map","child","isValidElement","type","Slottable","displayName","SlotClone","only","cloneElement","mergeProps","composeRefs","childProps","overrideProps","propName","slotPropValue","childPropValue","test","composeHandlers","childHandler","slotHandler","args","Event","defaultPrevented","Root"],"version":3,"file":"index.module.js.map"}