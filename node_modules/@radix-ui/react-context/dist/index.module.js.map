{"mappings":"+BAEA,SAASA,cAA+CC,GACtD,MAAMC,eAAUC,EAAMH,cAAgC,MAEtD,SAASI,EAASC,GAChB,MAAMC,SAAEA,KAAaC,GAAkBF,EAEjCG,EAAQL,EAAMM,SAClB,IAAMF,GAENG,OAAOC,OAAOJ,iBAEhB,OAAOK,EAAAC,cAACX,EAAQE,SAAT,CAAkBI,MAAOA,GAAQF,GAY1C,OADAF,EAASU,YAAcb,EAAoB,WACpC,CAACG,EATR,SAAoBW,GAClB,MAAMC,EAAUb,EAAMc,WAAWf,GACjC,GAAgB,OAAZc,EACF,MAAM,IAAIE,MAAO,KAAIH,6BAAwCd,OAE/D,OAAOe","sources":["./packages/react/context/src/createContext.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction createContext<ContextValueType extends object>(rootComponentName: string) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"],"names":["createContext","rootComponentName","Context","React","Provider","props","children","providerProps","value","useMemo","Object","values","_react","createElement","displayName","consumerName","context","useContext","Error"],"version":3,"file":"index.module.js.map"}